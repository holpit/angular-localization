{"version":3,"sources":["app.ts","models/Culture.ts","controllers/LanguageController.ts","controllers/MainController.ts","services/ILanguageService.js","services/LanguageService.ts"],"names":[],"mappings":"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","file":"app.js","sourceRoot":"/source/","sourcesContent":["/// <reference path=\"../typings/main.d.ts\" />\n/// <reference path=\"../typings/index.d.ts\" />\n\nvar app = angular.module(\"localizationApp\", []);\n\napp.service('LanguageService', ['$q', '$http', function($q, $http){\n    let cultures = [\n       new Culture('it-IT', 'Italiano'),\n       new Culture('en-US', 'English')\n    ];\n    return new LanguageService($q, $http, cultures, '/static/labels.json'); \n}]);","class Culture{\n    public constructor(private _code:string, private _description:string){}\n    \n    public get code():string{ return this._code; }\n    public get description():string{ return this._description; }\n}","class LanguageController{\n    \n    static $inject = [\"$scope\", \"LanguageService\"];\n    public constructor(private $scope:any, private languageService:ILanguageService){\n        this._cultures = languageService.registeredCultures;\n    }\n    \n    private _cultures:Array<Culture> = null;\n    public get cultures():Array<Culture> { return this._cultures; }\n    \n    public get currentCulture():Culture{\n        return this.languageService.currentCulture;\n    }\n    public set currentCulture(val:Culture){\n        console.log('setting culture to: ' + val.description);\n        this.languageService.setCurrent(val);\n    }\n}\napp.controller(\"LanguageController\", LanguageController);","class MainController{\n    static $inject = [\"$scope\", \"LanguageService\"];\n    \n    public constructor(private $scope:any, private languageService:ILanguageService){\n        let me = this;\n        \n        $scope.$watch( function () { return languageService.currentCulture; }, function (data:Culture) {\n             console.log('culture changed to: ' + data.description);\n             me.readLabels();\n        }, true);\n        \n        this.readLabels();\n    }\n    \n    private readLabels(){\n        const labelKeys = [\n                         'MAIN_TITLE', 'MAIN_DESCRIPTION'\n                        ];\n        let me = this;\n         \n        this.languageService.getLabels(labelKeys).then(function(results){\n            me._title = results[0];\n            me._description = results[1];\n        });\n    }\n    \n    private _title:String = '';\n    public get title():String{ return this._title; }\n    \n    private _description:String = '';\n    public get description():String{ return this._description; }\n}\napp.controller(\"MainController\", MainController);",null,"class LanguageService implements ILanguageService{\n    private _selectedCulture:Culture;\n    private _labels:any;\n    \n    constructor(private $q: ng.IQService, private $http:ng.IHttpService, \n                private _cultures:Array<Culture>, private _labelsUrl:string){\n        this._cultures = this._cultures || new Array<Culture>();\n        if(0 === this._cultures.length){\n            this._cultures.push(new Culture('en-US', 'English'));\n        }\n        this._selectedCulture = this._cultures[0];\n    }\n    \n    public get currentCulture():Culture{ \n        return this._selectedCulture; \n    }\n    \n    public get registeredCultures():Array<Culture>{\n        return this._cultures;\n    }\n    \n    public setCurrent(culture:Culture){\n        this._selectedCulture = culture || this._cultures[0];\n    }\n    \n    public getLabel(key:string):ng.IPromise<string>{\n        let defer = this.$q.defer(),\n            me = this;\n        \n        if(!this._labels || 0 === this._labels.length){\n            this.loadLabels().then(function(){\n                defer.resolve(me.getLabelText(key));\n            });\n        }else{\n            defer.resolve(this.getLabelText(key));\n        }\n        \n        return defer.promise;\n    }\n    \n    public getLabels(keys:Array<string>):ng.IPromise<Array<string>>{\n        let defer = this.$q.defer(),\n            me = this,\n            labels = new Array<string>();\n            \n        keys = keys || [];\n        \n        if(!this._labels || 0 === this._labels.length){\n            this.loadLabels().then(function(){\n                for(let i=0;i!=keys.length;++i){\n                    labels.push(me.getLabelText(keys[i]));\n                }\n                defer.resolve(labels);\n            });\n        }else{\n            for(let i=0;i!=keys.length;++i){\n                labels.push(me.getLabelText(keys[i]));\n            }\n            defer.resolve(labels);\n        }\n        \n        return defer.promise;\n    }\n    \n    private loadLabels():ng.IPromise<any>{\n        let me = this;\n        \n        return this.$http.get<any>(this._labelsUrl).then(function(response){\n            if(!response || 200 != response.status || !response.data){\n                return;\n            }\n            \n            me._labels = {};\n            \n            let data = response.data;\n            for(let code in data){\n                me._labels[code] = data[code];\n            }\n        });\n    }\n    \n    private getLabelText(key:string):string{\n        if(!key || \"\" === key.trim()){\n            return \"\";\n        }\n        \n        let cultureLabels = this._labels[this._selectedCulture.code];\n        if(!cultureLabels){\n            return key;\n        }\n        return cultureLabels[key];\n    }\n}"]}